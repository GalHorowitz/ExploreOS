
/// The default base of the primary bus' IO ports
const PRIMARY_BUS_IO_PORT_BASE: u16 = 0x1F0;
/// The default base of the primary bus' control ports
const PRIMARY_BUS_CONTROL_PORT_BASE: u16 = 0x3F6;
/// The default base of the secondary bus' IO ports
const SECONDARY_BUS_IO_PORT_BASE: u16 = 0x170;
/// The default base of the secondary bus' control ports
const SECONDARY_BUS_CONTROL_PORT_BASE: u16 = 0x376;

/// Offset from the base IO port of the PIO data register, read/write
const DATA_REGISTER_IO_OFFSET: u16 = 0;
/// Offset from the base IO port of the register holding he error generated by the last command,
/// read only
const ERROR_REGISTER_IO_OFFSET: u16 = 1;
/// Offset from the base IO port of the interface features register, write only
const FEATURES_REGISTER_IO_OFFSET: u16 = 1;
/// Offset from the base IO port of the register holding the number of sectors to read/write,
/// read/write
const SECTOR_COUNT_REGISTER_IO_OFFSET: u16 = 2;
/// Offset from the base IO port of the register holding the low part of the LBA, read/write
const LBA_LOW_REGISTER_IO_OFFSET: u16 = 3;
/// Offset from the base IO port of the register holding the mid part of the LBA, read/write
const LBA_MID_REGISTER_IO_OFFSET: u16 = 4;
/// Offset from the base IO port of the register holding the high part of the LBA, read/write
const LBA_HIGH_REGISTER_IO_OFFSET: u16 = 5;
/// Offset from the base IO port of the drive selector register, read/write
const DRIVE_SELECT_REGISTER_IO_OFFSET: u16 = 6;
/// Offset from the base IO port of the current status register, read only
const STATUS_REGISTER_IO_OFFSET: u16 = 7;
/// Offset from the base IO port of the current command register, write only
const COMMAND_REGISTER_IO_OFFSET: u16 = 7;

/// Offset from the base control port of the alternate status register, which is used to read the
/// status without causing an EOI, read only
const ALTERNATE_STATUS_REGISTER_CONTROL_OFFSET: u16 = 0;
/// Offset from the base control port of the device control register, which is used to reset the bus
/// and enable/disable interrupts, write only
const DEVICE_CONTROL_REGISTER_CONTROL_OFFSET: u16 = 0;
/// Offset from the base control port of the register holding the selected drive information,
/// read only
const DRIVE_ADDRESS_REGISTER_CONTROL_OFFSET: u16 = 1;

/// Address mark not found error
const ERROR_REGISTER_AMNF_BITMASK: u8 = 2 << 0;
/// Track zero not found error
const ERROR_REGISTER_TKZNF_BITMASK: u8 = 2 << 1;
/// Aborted command error
const ERROR_REGISTER_ABRT_BITMASK: u8 = 2 << 2;
/// Media change request error
const ERROR_REGISTER_MCR_BITMASK: u8 = 2 << 3;
/// ID not found error
const ERROR_REGISTER_IDNF_BITMASK: u8 = 2 << 4;
/// Media change error
const ERROR_REGISTER_MC_BITMASK: u8 = 2 << 5;
/// Uncorrectable data error
const ERROR_REGISTER_UNC_BITMASK: u8 = 2 << 6;
/// Bad bock detected error
const ERROR_REGISTER_BBK_BITMASK: u8 = 2 << 7;

pub fn init() {

}